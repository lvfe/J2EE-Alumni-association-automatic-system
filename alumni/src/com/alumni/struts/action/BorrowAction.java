/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.alumni.struts.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.alumni.core.ChStr;
import com.alumni.struts.dao.BorrowDAO;
import com.alumni.struts.form.BorrowForm;

/** 
 * MyEclipse Struts
 * Creation date: 04-13-2013
 * 
 * XDoclet definition:
 * @struts.action path="/borrow" name="borrowForm" input="/borrow/borrow_add.jsp" scope="request" validate="true"
 */
public class BorrowAction extends Action {
	private BorrowDAO borrowDAO = null;
    private ChStr chStr=new ChStr();
    public BorrowAction() {
        this.borrowDAO = new BorrowDAO();
    }	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String action = request.getParameter("action");
        System.out.println("action:" + action);
        if (action == null || "".equals(action)) {
        	request.setAttribute("error","error");
            return mapping.findForward("error");
        }else if ("borrowQuery".equals(action)) {
            return borrowQuery(mapping, form, request,response);
		}else if("borrowAdd".equals(action)){
			 return borrowAdd(mapping, form, request,response);
		}else if("borrowDel".equals(action)){
			return borrowDel(mapping, form, request,response);
		} else if("borrowModifyQ".equals(action)){
                return borrowQueryModify(mapping, form, request,response);
        }else if("borrowModify".equals(action)){
            return borrowModify(mapping, form, request,response);
        }else if("borrowReQuery".equals(action)){
                return borrowReQuery(mapping, form, request,response);
        }else if("borrowUreQuery".equals(action)){
                return borrowUreQuery(mapping, form, request,response);
        }else if("borrowReturn".equals(action)){
                return borrowReturn(mapping, form, request,response);
        }else if("borrowRestore".equals(action)){
            return borrowRestore(mapping, form, request,response);
        }else if("overdue".equals(action)){
        	return overdue(mapping, form, request,response);
        }else 
			request.setAttribute("error", "error");
			return mapping.findForward("error");
	}
	private ActionForward overdue(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		request.setAttribute("borrowQuery", borrowDAO.query(0));
		request.setAttribute("borrowReQuery", borrowDAO.queryRe());
		request.setAttribute("borrowUreQuery", borrowDAO.queryUre());
        return mapping.findForward("overdue");
	}
	private ActionForward borrowRestore(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		BorrowForm borrowForm = (BorrowForm) form;
		borrowForm.setId(Integer.parseInt(request.getParameter("id")));
        int ret=borrowDAO.storeUpdate(borrowForm);
        if(ret==0){
            request.setAttribute("error","error");
            return mapping.findForward("error");
        }else{
            return mapping.findForward("borrowRestore");
        }
	}
	private ActionForward borrowReturn(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		BorrowForm borrowForm = (BorrowForm) form;
		borrowForm.setId(Integer.parseInt(request.getParameter("id")));
        int ret=borrowDAO.returnUpdate(borrowForm);
        if(ret==0){
            request.setAttribute("error","error");
            return mapping.findForward("error");
        }else{
            return mapping.findForward("borrowReturn");
        }
	}
	private ActionForward borrowUreQuery(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		request.setAttribute("borrowUreQuery", borrowDAO.queryUre());
        return mapping.findForward("borrowUreQuery");
	}
	private ActionForward borrowReQuery(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		request.setAttribute("borrowReQuery", borrowDAO.queryRe());
        return mapping.findForward("borrowReQuery");
	}
	@SuppressWarnings("static-access")
	private ActionForward borrowModify(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		BorrowForm borrowForm=(BorrowForm) form;
		borrowForm.setEid(borrowForm.getEid());
		borrowForm.setName(chStr.toChinese(borrowForm.getName()));
		borrowForm.setStart_date(chStr.toChinese(borrowForm.getStart_date()));
		borrowForm.setEnd_date(chStr.toChinese(borrowForm.getEnd_date()));
		borrowForm.setEusage(chStr.toChinese(borrowForm.getEusage()));
		borrowForm.setStatus(0);
        int ret=borrowDAO.update(borrowForm);
        if(ret==0){
            request.setAttribute("error","error");
            return mapping.findForward("error");
        }else{
            return mapping.findForward("borrowModify");
        }
	}
	private ActionForward borrowQueryModify(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		request.setAttribute("borrowQuery",borrowDAO.query(Integer.parseInt(request.getParameter("id"))));
        return mapping.findForward("borrowQueryModify");
	}
	private ActionForward borrowDel(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		BorrowForm borrowForm = (BorrowForm) form;
		borrowForm.setId(Integer.parseInt(request.getParameter("id")));
        int ret = borrowDAO.delete(borrowForm);
        if (ret == 0) {
            request.setAttribute("error","error");
            return mapping.findForward("error");
        } else {
            return mapping.findForward("borrowDel");
        }
	}
	@SuppressWarnings("static-access")
	private ActionForward borrowAdd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		BorrowForm borrowForm = (BorrowForm) form;
		borrowForm.setEid(borrowForm.getEid());
		borrowForm.setName(chStr.toChinese(borrowForm.getName()));
		borrowForm.setStart_date(chStr.toChinese(borrowForm.getStart_date()));
		borrowForm.setEnd_date(chStr.toChinese(borrowForm.getEnd_date()));
		borrowForm.setEusage(chStr.toChinese(borrowForm.getEusage()));
		borrowForm.setStatus(0);
        int ret = borrowDAO.insert(borrowForm);
        System.out.println("ret:"+ret);
        if (ret == 1) {
            return mapping.findForward("borrowAdd");
        } else if(ret==2){
            request.setAttribute("error","error");
            return mapping.findForward("error");
        }else {
            request.setAttribute("error","error");
            return mapping.findForward("error");
        }
	}
	private ActionForward borrowQuery(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		request.setAttribute("borrowQuery", borrowDAO.query(0));
		request.setAttribute("borrowReQuery", borrowDAO.queryRe());
		request.setAttribute("borrowUreQuery", borrowDAO.queryUre());
        return mapping.findForward("borrowQuery");
	}
}