/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.alumni.struts.action;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.alumni.core.ChStr;
import com.alumni.struts.dao.MessageDAO;
import com.alumni.struts.dao.PersonnelDAO;
import com.alumni.struts.dao.VisitDAO;
import com.alumni.struts.form.Message;
import com.alumni.struts.form.PersonnelForm;
import com.alumni.struts.form.Visit;
import com.alunmi.md5.*;
/** 
 * MyEclipse Struts
 * Creation date: 04-09-2013
 * 
 * XDoclet definition:
 * @struts.action path="/personnel" name="personnelForm" input="/form/personnel.jsp" scope="request" validate="true"
 */
public class PersonnelAction extends Action {
	private PersonnelDAO personnelDAO = null;
    private ChStr chStr=new ChStr();
    private MD5 oMD5=new MD5();
    public PersonnelAction() {
        this.personnelDAO = new PersonnelDAO();
    }
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String action = request.getParameter("action");
        System.out.println("action" + action);
        if (action == null || "".equals(action)) {
            return mapping.findForward("error");
        }else if ("personnelQuery".equals(action)) {
            return personnelQuery(mapping, form, request,response);
			
		}else if("personnelAdd".equals(action)){
			 return personnelAdd(mapping, form, request,response);
		}else if("personnelDel".equals(action)){
			return personnelDel(mapping, form, request,response);
		} else if("personnelModifyQ".equals(action)){
                return personnelQueryModify(mapping, form, request,response);
        }else if("personnelModifyQM".equals(action)){
            return personnelQueryModifyM(mapping, form, request,response);
        }else if("personnelModify".equals(action)){
            return personnelModify(mapping, form, request,response);
        }
			request.setAttribute("error", "error");
			return mapping.findForward("error");
	}
	
    private ActionForward personnelQuery(ActionMapping mapping, ActionForm form,
                              HttpServletRequest request,
                              HttpServletResponse response) {
        request.setAttribute("personnelQuery", personnelDAO.query(0));
        return mapping.findForward("personnelQuery");
    }

    
    @SuppressWarnings("static-access")
	private ActionForward personnelAdd(ActionMapping mapping, ActionForm form,
                              HttpServletRequest request,
                              HttpServletResponse response) {
        PersonnelForm personnelForm = (PersonnelForm) form;
        personnelForm.setUsername(chStr.toChinese(personnelForm.getUsername()));
        personnelForm.setName(chStr.toChinese(personnelForm.getName()));
        personnelForm.setEmail(chStr.toChinese(personnelForm.getEmail()));
        personnelForm.setMobileTel(chStr.toChinese(personnelForm.getMobileTel())); 
        personnelForm.setPassword(oMD5.getMD5ofStr(personnelForm.getPassword()));
        personnelForm.setEmailpass(personnelForm.getEmailpass());
        int ret = personnelDAO.insert(personnelForm);
        System.out.println("ret"+ret);
        if (ret == 1) {
    		VisitDAO visitDao=new VisitDAO();
    		Message message=null;
    		List list=new MessageDAO().listMessage();
    		for(int i=0;i<list.size();i++){
    		Visit visit=new Visit();
    		message=(Message) list.get(i);
    		visit.setMid(message.getId());
    		visit.setUserid(personnelDAO.findItId(personnelForm));
    		visit.setIsRead(0);
    		visitDao.addMessage(visit);
    		}
            return mapping.findForward("personnelAdd");
        } else if(ret==2){
            request.setAttribute("error","用户名已用!");
            System.out.println("用户名已用!");
            return mapping.findForward("error");
        }else {
            request.setAttribute("error","添加错");
            return mapping.findForward("error");
        }
    }
    
    private ActionForward personnelQueryModify(ActionMapping mapping, ActionForm form,
                              HttpServletRequest request,
                              HttpServletResponse response) {
        @SuppressWarnings("unused")
		PersonnelForm personnelForm = (PersonnelForm) form;
        request.setAttribute("personnelQuery",personnelDAO.query(Integer.parseInt(request.getParameter("id"))));
        return mapping.findForward("personnelQueryModify");
    }
    private ActionForward personnelQueryModifyM(ActionMapping mapping, ActionForm form,
            HttpServletRequest request,
            HttpServletResponse response) {
@SuppressWarnings("unused")
PersonnelForm personnelForm = (PersonnelForm) form;
request.setAttribute("personnelQuery",personnelDAO.query(Integer.parseInt(request.getParameter("id"))));
return mapping.findForward("personnelQueryModifyM");
}
    @SuppressWarnings("static-access")
	private ActionForward personnelModify(ActionMapping mapping, ActionForm form,
                              HttpServletRequest request,
                              HttpServletResponse response){
        PersonnelForm personnelForm=(PersonnelForm) form;
        int ID=personnelForm.getID();
        personnelForm.setID(ID);
        personnelForm.setUsername(chStr.toChinese(personnelForm.getUsername()));
        personnelForm.setName(chStr.toChinese(personnelForm.getName()));
        System.out.println(personnelForm.getStatus());
        System.out.println("das"+request.getParameter("status"));
        personnelForm.setStatus(personnelForm.getStatus());
        personnelForm.setEmail(chStr.toChinese(personnelForm.getEmail()));
        personnelForm.setMobileTel(chStr.toChinese(personnelForm.getMobileTel()));
        personnelForm.setPassword(oMD5.getMD5ofStr(personnelForm.getPassword()));
        personnelForm.setEmailpass(personnelForm.getEmailpass());
        int ret=personnelDAO.update(personnelForm);
        if(ret==0){
            request.setAttribute("error","error");
            return mapping.findForward("error");
        }else{
            return mapping.findForward("personnelModify");
        }
    }
    
    private ActionForward personnelDel(ActionMapping mapping, ActionForm form,
                              HttpServletRequest request,
                              HttpServletResponse response) {
        PersonnelForm personnelForm = (PersonnelForm) form;
        int id=Integer.parseInt(request.getParameter("id"));
        personnelForm.setID(id);
        int ret =0;
        ret=personnelDAO.delete(personnelForm);
        if (ret == 0) {
            request.setAttribute("error","error");
            return mapping.findForward("error");
        } else {
        	VisitDAO visitDao=new VisitDAO();
    		visitDao.delMessage(id);
            return mapping.findForward("personnelDel");
        }
    }
}