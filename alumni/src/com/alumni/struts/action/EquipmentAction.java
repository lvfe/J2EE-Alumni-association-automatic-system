/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.alumni.struts.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.alumni.core.ChStr;
import com.alumni.struts.dao.EquipmentDAO;
import com.alumni.struts.form.EquipmentForm;

/** 
 * MyEclipse Struts
 * Creation date: 04-10-2013
 * 
 * XDoclet definition:
 * @struts.action path="/equipment" name="equipmentForm"  scope="request" validate="true"
 */
public class EquipmentAction extends Action {
	private EquipmentDAO equipmentDAO;
	/*
	 * Generated Methods
	 */
	public EquipmentAction() {
        this.equipmentDAO = new EquipmentDAO();
    }
	private ChStr chStr=new ChStr();
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		@SuppressWarnings("unused")
		EquipmentForm equipmentForm = (EquipmentForm) form;
		String action=request.getParameter("action");

        System.out.println("action" + action);
		if("equipmentAdd".equals(action)){
			return equipmentAdd(mapping,form,request,response);
		}else if("equipmentDel".equals(action)){
			return equipmentDel(mapping,form,request,response);
		}else if("equipmentQuery".equals(action)){
			return equipmentQuery(mapping,form,request,response);
		}else if("equipmentModify".equals(action)){
			return equipmentModify(mapping,form,request,response);
		}else if("equipmentQueryModify".equals(action)) {
			return equipmentQueryModify(mapping,form,request,response);
		}
		request.setAttribute("error", "error");
		return mapping.findForward("error");
	}

	private ActionForward equipmentQueryModify(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		@SuppressWarnings("unused")
		EquipmentForm equipmentForm = (EquipmentForm) form;
		EquipmentDAO equipmentDAO=new EquipmentDAO();
		request.setAttribute("equipmentQuery",equipmentDAO.query(Integer.parseInt(request.getParameter("id"))));
        return mapping.findForward("equipmentQueryModify");
	}

	@SuppressWarnings("static-access")
	private ActionForward equipmentModify(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		EquipmentForm equipmentForm = (EquipmentForm)form;
		equipmentForm.setEname(chStr.toChinese(equipmentForm.getEname()));
		equipmentForm.setEtype(chStr.toChinese(equipmentForm.getEtype()));
		equipmentForm.setEusage(chStr.toChinese(equipmentForm.getEusage()));
		equipmentForm.setBuy_time(chStr.toChinese(equipmentForm.getBuy_time()));
		int res=equipmentDAO.update(equipmentForm);
		if(res==1){
		return mapping.findForward("equipmentModify");
		}else return mapping.findForward("error");
	}

	private ActionForward equipmentQuery(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		request.setAttribute("equipmentQuery", equipmentDAO.query(0));
		return mapping.findForward("equipmentQuery");
	}

	private ActionForward equipmentDel(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		EquipmentForm equipmentForm = new EquipmentForm();
		int id=Integer.parseInt(request.getParameter("id"));
		equipmentForm.setId(id);
		int ret=equipmentDAO.delete(equipmentForm);
		if(ret==1)
		return mapping.findForward("equipmentDel");
		else {
			request.setAttribute("error", "error");
			return mapping.findForward("error");
		}
	}

	@SuppressWarnings("static-access")
	private ActionForward equipmentAdd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		EquipmentForm equipmentForm = (EquipmentForm)form;
		equipmentForm.setEname(chStr.toChinese(equipmentForm.getEname()));
		equipmentForm.setEtype(chStr.toChinese(equipmentForm.getEtype()));
		equipmentForm.setEusage(chStr.toChinese(equipmentForm.getEusage()));
		equipmentForm.setBuy_time(chStr.toChinese(equipmentForm.getBuy_time()));
		int ret = equipmentDAO.insert(equipmentForm);
        System.out.println("ret:"+ret);
        if (ret == 1) {
        	return mapping.findForward("equipmentAdd");
        } else if(ret==2){
            request.setAttribute("error","error");
            return mapping.findForward("error");
        }else {
            request.setAttribute("error","error");
            return mapping.findForward("error");
        }
		
	}
}